// <auto-generated />
using System;
using DataAccess.Concrete.EntityFramework;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DataAccess.Migrations
{
    [DbContext(typeof(MarryUsContext))]
    [Migration("20221203142546_CreateEntityTables")]
    partial class CreateEntityTables
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("Entities.Concrete.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("CategoryName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("CategoryStatus")
                        .HasColumnType("bit");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Entities.Concrete.Location", b =>
                {
                    b.Property<int>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LocationId");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("Entities.Concrete.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("OrganizationDate")
                        .HasColumnType("datetime2");

                    b.Property<short>("Price")
                        .HasColumnType("smallint");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("WeddingPlaceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Entities.Concrete.WeddingPlace", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<short>("Capacity")
                        .HasColumnType("smallint");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<short>("Discount_1")
                        .HasColumnType("smallint");

                    b.Property<short>("Discount_2")
                        .HasColumnType("smallint");

                    b.Property<short>("Discount_3")
                        .HasColumnType("smallint");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlaceCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlaceName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PlaceOwnerId")
                        .HasColumnType("int");

                    b.Property<bool>("PlaceStatus")
                        .HasColumnType("bit");

                    b.Property<int>("PlaceType")
                        .HasColumnType("int");

                    b.Property<int>("PlateCode")
                        .HasColumnType("int");

                    b.Property<string>("PlateName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("PriceFirst")
                        .HasColumnType("float");

                    b.Property<double>("PriceLast")
                        .HasColumnType("float");

                    b.Property<bool>("isAlcoholIncluded")
                        .HasColumnType("bit");

                    b.Property<bool>("isFoodIncluded")
                        .HasColumnType("bit");

                    b.Property<bool>("isReserved")
                        .HasColumnType("bit");

                    b.Property<string>("placePhotos")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("WeddingPlaces");
                });

            modelBuilder.Entity("Entities.Concrete.WeddingPlace", b =>
                {
                    b.HasOne("Entities.Concrete.Category", "Category")
                        .WithMany("WeddingPlaces")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Entities.Concrete.Category", b =>
                {
                    b.Navigation("WeddingPlaces");
                });
#pragma warning restore 612, 618
        }
    }
}
